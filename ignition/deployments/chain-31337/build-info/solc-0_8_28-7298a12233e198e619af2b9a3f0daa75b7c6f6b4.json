{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-7298a12233e198e619af2b9a3f0daa75b7c6f6b4",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SLARegistry.sol": "project/contracts/SLARegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/SLARegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title SLARegistry\r\n * @dev Registro de Clientes, Contratos (con hash/IPFS del documento legal) y SLAs con alertas por incumplimiento.\r\n * - Microservicio \"Contratos\" registra clientes/contratos/SLAs.\r\n * - Microservicio \"Novedades\" puede ajustar/pausar SLAs cuando llegan novedades operativas.\r\n * - Cualquier reporte de métrica que incumpla dispara un evento de alerta.\r\n *\r\n * Eventos = \"webhooks\" on-chain: los escuchas con tu backend para notificar (email, Slack, etc.)\r\n */\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\ncontract SLARegistry is AccessControl {\r\n    // ───────────────────────────── ROLES ─────────────────────────────\r\n    bytes32 public constant CONTRACT_MS_ROLE = keccak256(\"CONTRACT_MS_ROLE\"); // microservicio de Contratos\r\n    bytes32 public constant NOVELTIES_MS_ROLE = keccak256(\"NOVELTIES_MS_ROLE\"); // microservicio de Novedades\r\n    bytes32 public constant OPS_ROLE = keccak256(\"OPS_ROLE\"); // Operaciones (ack/resolver alertas)\r\n\r\n    constructor(address admin) {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\r\n        _grantRole(CONTRACT_MS_ROLE, admin);\r\n        _grantRole(NOVELTIES_MS_ROLE, admin);\r\n        _grantRole(OPS_ROLE, admin);\r\n    }\r\n\r\n    // ──────────────────────────── TYPES ──────────────────────────────\r\n    enum Comparator {\r\n        LT,\r\n        LE,\r\n        EQ,\r\n        GE,\r\n        GT\r\n    } // cómo comparar observed vs target\r\n    enum SLAStatus {\r\n        Active,\r\n        Paused,\r\n        Archived\r\n    }\r\n    enum AlertStatus {\r\n        Open,\r\n        Acknowledged,\r\n        Resolved\r\n    }\r\n\r\n    struct Client {\r\n        uint256 id;\r\n        string name; // opcional (para referencia off-chain)\r\n        address account; // dueño/propietario lógico (opcional)\r\n        bool active;\r\n    }\r\n\r\n    struct ClientContract {\r\n        uint256 id;\r\n        uint256 clientId;\r\n        string ipfsCid; // CID del documento legal en IPFS (contrato real)\r\n        uint64 startDate; // epoch\r\n        uint64 endDate; // epoch (0 si indeterminado)\r\n        bool active;\r\n    }\r\n\r\n    struct SLA {\r\n        uint256 id;\r\n        uint256 contractId;\r\n        string name; // ej. \"Entrega <= 24h\"\r\n        uint256 target; // umbral (ej. 24 si son horas; o 95 si es %)\r\n        Comparator comparator; // cómo evaluar\r\n        SLAStatus status; // activo/pausa/archivo\r\n        uint64 windowSeconds; // ventana de observación (si aplica)\r\n        uint64 lastReportAt; // timestamp último reporte\r\n        uint32 consecutiveBreaches; // contadores simples\r\n        uint32 totalBreaches;\r\n        uint32 totalPass;\r\n    }\r\n\r\n    struct Alert {\r\n        uint256 id;\r\n        uint256 slaId;\r\n        uint64 createdAt;\r\n        AlertStatus status;\r\n        string reason; // texto libre corto: por qué se disparó (ej. \"Tiempo=36h > 24h\")\r\n    }\r\n\r\n    // ──────────────────────────── STORAGE ────────────────────────────\r\n    uint256 private _clientIds;\r\n    uint256 private _contractIds;\r\n    uint256 private _slaIds;\r\n    uint256 private _alertIds;\r\n\r\n    mapping(uint256 => Client) public clients;\r\n    mapping(uint256 => ClientContract) public contractsById;\r\n    mapping(uint256 => SLA) public slas;\r\n    mapping(uint256 => Alert) public alerts;\r\n\r\n    // Índices básicos\r\n    mapping(uint256 => uint256[]) public clientContracts; // clientId => contractIds\r\n    mapping(uint256 => uint256[]) public contractSLAs; // contractId => slaIds\r\n    mapping(uint256 => uint256[]) public slaAlerts; // slaId => alertIds\r\n\r\n    // ───────────────────────────── EVENTS ────────────────────────────\r\n    event ContractCreated(\r\n        uint256 indexed contractId,\r\n        uint256 indexed clientId,\r\n        string ipfsCid,\r\n        uint64 startDate,\r\n        uint64 endDate\r\n    );\r\n    event ContractUpdated(uint256 indexed contractId, string newIpfsCid);\r\n\r\n    event SLACreated(\r\n        uint256 indexed slaId,\r\n        uint256 indexed contractId,\r\n        string name,\r\n        uint256 target,\r\n        Comparator comparator,\r\n        uint64 windowSeconds\r\n    );\r\n\r\n    event SLAMetricReported(\r\n        uint256 indexed slaId,\r\n        uint256 observed,\r\n        bool success,\r\n        string note\r\n    );\r\n\r\n    event SLAViolated(// <— ALERTA para que tu backend notifique\r\n    uint256 indexed alertId, uint256 indexed slaId, string reason);\r\n\r\n    event AlertAcknowledged(uint256 indexed alertId, address by);\r\n    event AlertResolved(\r\n        uint256 indexed alertId,\r\n        address by,\r\n        string resolutionNote\r\n    );\r\n\r\n    event NoveltyApplied(// <— cuando Novedades modifica un SLA\r\n    uint256 indexed slaId, string field, string detail);\r\n\r\n    event SLAStatusChanged(uint256 indexed slaId, SLAStatus newStatus);\r\n\r\n    // ─────────────────────────── UTILIDADES ──────────────────────────\r\n    function _compare(\r\n        uint256 observed,\r\n        uint256 target,\r\n        Comparator cmp\r\n    ) internal pure returns (bool) {\r\n        if (cmp == Comparator.LT) return observed < target;\r\n        if (cmp == Comparator.LE) return observed <= target;\r\n        if (cmp == Comparator.EQ) return observed == target;\r\n        if (cmp == Comparator.GE) return observed >= target;\r\n        if (cmp == Comparator.GT) return observed > target;\r\n        return false;\r\n    }\r\n\r\n    // ────────────────────── 1) REGISTRO DE CLIENTE ───────────────────\r\n    function registerClient(\r\n        string calldata name,\r\n        address account\r\n    ) external onlyRole(CONTRACT_MS_ROLE) returns (uint256 clientId) {\r\n        _clientIds++;\r\n        clientId = _clientIds;\r\n\r\n        clients[clientId] = Client({\r\n            id: clientId,\r\n            name: name,\r\n            account: account,\r\n            active: true\r\n        });\r\n\r\n    }\r\n\r\n    // ──────────── 1b) CREAR CONTRATO (con hash/CID IPFS legal) ───────\r\n    function createContract(\r\n        uint256 clientId,\r\n        string calldata ipfsCid,\r\n        uint64 startDate,\r\n        uint64 endDate\r\n    ) external onlyRole(CONTRACT_MS_ROLE) returns (uint256 contractId) {\r\n        require(clients[clientId].active, \"Client not active\");\r\n\r\n        _contractIds++;\r\n        contractId = _contractIds;\r\n\r\n        contractsById[contractId] = ClientContract({\r\n            id: contractId,\r\n            clientId: clientId,\r\n            ipfsCid: ipfsCid,\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            active: true\r\n        });\r\n\r\n        clientContracts[clientId].push(contractId);\r\n\r\n        emit ContractCreated(contractId, clientId, ipfsCid, startDate, endDate);\r\n    }\r\n\r\n    // Opcional: actualizar/rotar el documento legal (nuevo CID/IPFS)\r\n    function updateContractIPFS(\r\n        uint256 contractId,\r\n        string calldata newCid\r\n    ) external onlyRole(CONTRACT_MS_ROLE) {\r\n        require(contractsById[contractId].active, \"Contract not active\");\r\n        contractsById[contractId].ipfsCid = newCid;\r\n        emit ContractUpdated(contractId, newCid);\r\n    }\r\n\r\n    // ──────────── 2) DEFINIR SLA (objetivo, comparador, ventana) ─────\r\n    function addSLA(\r\n        uint256 contractId,\r\n        string calldata name,\r\n        uint256 target,\r\n        Comparator comparator,\r\n        uint64 windowSeconds\r\n    ) external onlyRole(CONTRACT_MS_ROLE) returns (uint256 slaId) {\r\n        require(contractsById[contractId].active, \"Contract not active\");\r\n\r\n        _slaIds++;\r\n        slaId = _slaIds;\r\n\r\n        slas[slaId] = SLA({\r\n            id: slaId,\r\n            contractId: contractId,\r\n            name: name,\r\n            target: target,\r\n            comparator: comparator,\r\n            status: SLAStatus.Active,\r\n            windowSeconds: windowSeconds,\r\n            lastReportAt: 0,\r\n            consecutiveBreaches: 0,\r\n            totalBreaches: 0,\r\n            totalPass: 0\r\n        });\r\n\r\n        contractSLAs[contractId].push(slaId);\r\n\r\n        emit SLACreated(\r\n            slaId,\r\n            contractId,\r\n            name,\r\n            target,\r\n            comparator,\r\n            windowSeconds\r\n        );\r\n    }\r\n\r\n    // ───────────── 3) REPORTE DE MÉTRICA (genera alerta si falla) ────\r\n    /**\r\n     * @param slaId     SLA a evaluar\r\n     * @param observed  Valor observado (ej. 36 si fueron 36h; 92 si es 92%)\r\n     * @param note      Texto breve (ej. \"Pedido 1234 - entrega 36h\")\r\n     */\r\n    function reportMetric(\r\n        uint256 slaId,\r\n        uint256 observed,\r\n        string calldata note\r\n    )\r\n        external\r\n        onlyRole(CONTRACT_MS_ROLE) // o el servicio que recolecte KPIs\r\n    {\r\n        SLA storage s = slas[slaId];\r\n        require(s.status == SLAStatus.Active, \"SLA not active\");\r\n\r\n        bool ok = _compare(observed, s.target, s.comparator);\r\n        s.lastReportAt = uint64(block.timestamp);\r\n\r\n        if (ok) {\r\n            s.consecutiveBreaches = 0;\r\n            s.totalPass += 1;\r\n            emit SLAMetricReported(slaId, observed, true, note);\r\n        } else {\r\n            s.consecutiveBreaches += 1;\r\n            s.totalBreaches += 1;\r\n            emit SLAMetricReported(slaId, observed, false, note);\r\n\r\n            // Crear alerta\r\n            _alertIds++;\r\n            uint256 alertId = _alertIds;\r\n\r\n            alerts[alertId] = Alert({\r\n                id: alertId,\r\n                slaId: slaId,\r\n                createdAt: uint64(block.timestamp),\r\n                status: AlertStatus.Open,\r\n                reason: note\r\n            });\r\n\r\n            slaAlerts[slaId].push(alertId);\r\n            emit SLAViolated(alertId, slaId, note); // <— escuchado por tu backend para notificar\r\n        }\r\n    }\r\n\r\n    // ───────────── 4) NOVEDADES: modificar/pausar un SLA ─────────────\r\n    function pauseSLA(\r\n        uint256 slaId,\r\n        string calldata reason\r\n    ) external onlyRole(NOVELTIES_MS_ROLE) {\r\n        SLA storage s = slas[slaId];\r\n        require(s.status == SLAStatus.Active, \"SLA not active\");\r\n        s.status = SLAStatus.Paused;\r\n        emit SLAStatusChanged(slaId, s.status);\r\n        emit NoveltyApplied(slaId, \"status\", reason);\r\n    }\r\n\r\n    function resumeSLA(\r\n        uint256 slaId,\r\n        string calldata reason\r\n    ) external onlyRole(NOVELTIES_MS_ROLE) {\r\n        SLA storage s = slas[slaId];\r\n        require(s.status == SLAStatus.Paused, \"SLA not paused\");\r\n        s.status = SLAStatus.Active;\r\n        emit SLAStatusChanged(slaId, s.status);\r\n        emit NoveltyApplied(slaId, \"status\", reason);\r\n    }\r\n\r\n    // Cambiar el objetivo/umbral ante una novedad (p. ej., bloqueo de vías → objetivo pasa de 24h a 36h)\r\n    function updateSLATarget(\r\n        uint256 slaId,\r\n        uint256 newTarget,\r\n        string calldata reason\r\n    ) external onlyRole(NOVELTIES_MS_ROLE) {\r\n        SLA storage s = slas[slaId];\r\n        s.target = newTarget;\r\n        emit NoveltyApplied(slaId, \"target\", reason);\r\n    }\r\n\r\n    // Cambiar el comparador (ej. de <= a <) o ventana\r\n    function updateSLAParams(\r\n        uint256 slaId,\r\n        Comparator newComparator,\r\n        uint64 newWindowSeconds,\r\n        string calldata reason\r\n    ) external onlyRole(NOVELTIES_MS_ROLE) {\r\n        SLA storage s = slas[slaId];\r\n        s.comparator = newComparator;\r\n        s.windowSeconds = newWindowSeconds;\r\n        emit NoveltyApplied(slaId, \"comparator|window\", reason);\r\n    }\r\n\r\n    // ───────────── ACK/RESOLVER ALERTAS (Operaciones) ────────────────\r\n    function acknowledgeAlert(uint256 alertId) external onlyRole(OPS_ROLE) {\r\n        Alert storage a = alerts[alertId];\r\n        require(a.status == AlertStatus.Open, \"Alert not open\");\r\n        a.status = AlertStatus.Acknowledged;\r\n        emit AlertAcknowledged(alertId, msg.sender);\r\n    }\r\n\r\n    function resolveAlert(\r\n        uint256 alertId,\r\n        string calldata resolutionNote\r\n    ) external onlyRole(OPS_ROLE) {\r\n        Alert storage a = alerts[alertId];\r\n        require(\r\n            a.status == AlertStatus.Acknowledged ||\r\n                a.status == AlertStatus.Open,\r\n            \"Alert not open/ack\"\r\n        );\r\n        a.status = AlertStatus.Resolved;\r\n        emit AlertResolved(alertId, msg.sender, resolutionNote);\r\n    }\r\n\r\n    // ────────────────────────── VIEWS ÚTILES ─────────────────────────\r\n    function getClientContracts(\r\n        uint256 clientId\r\n    ) external view returns (uint256[] memory) {\r\n        return clientContracts[clientId];\r\n    }\r\n\r\n    function getContractSLAs(\r\n        uint256 contractId\r\n    ) external view returns (uint256[] memory) {\r\n        return contractSLAs[contractId];\r\n    }\r\n\r\n    function getSLAAlerts(\r\n        uint256 slaId\r\n    ) external view returns (uint256[] memory) {\r\n        return slaAlerts[slaId];\r\n    }\r\n}\r\n\r\n"
      }
    }
  }
}